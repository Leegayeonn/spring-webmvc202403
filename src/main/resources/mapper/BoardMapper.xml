
<!-- 이 파일이 mybatis 의 mapper 로 사용된다는 일종의 선언 (외우지마세요) -->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace 에는 이 파일과 연동될 인터페이스의 전체 경로 (패키지명 포함 클래스명)를 적는다. -->
<mapper namespace="com.spring.mvc.chap05.mapper.BoardMapper">

    <!-- 구현하고자 하는 인터페이스에 명세된 추상 메서드별로 SQL 작성 -->
    <!-- id 에는 추상메서드 이름을 적음. (인터페이스에 명시된 메서드) -->
    <!-- SQL 작성할 때 값을 전달하는 방법은
            1. 추상메서드를 보고 어떤 타입의 값이 전달되는지 확인.
            2. 값이 만약 객체라면, 객체 내부의 필드값을 꺼내기 위해 필드명을 지목. (get 안붙여요)
            3. 단일 값이라면 매개변수명으로 지목 -->

    <insert id="save">
        INSERT INTO tbl_board
        (title,content,writer)
        VALUES(#{title}, #{content}, #{writer})
    </insert>

    <delete id="delete">
        DELETE FROM tbl_board
        WHERE board_no=#{boardNo}
    </delete>

    <update id="updateViewCount">
        UPDATE tbl_board
        SET view_count = view_count + 1
        WHERE board_no = #{bno}
    </update>


    <!-- 리턴이 있는 메서드! -->
    <!-- SELECT 의 경우에는 반환되는 타입을 작성해 주어야 합니다.
        resultType 을 통해 리턴되는 객체의 타입을 작성하기
        데이터베이스의 컬럼명과 엔터티의 필드명이 동일해야 합니다.
        (스네이크케이스 -> 카멜케이스 변환은 따로 설정을 통해 처리)
        ex) board_no : boardNo (o)  board_num : bNum (x) -->

    <!-- resultType 에 List 를 따로 언급할 필요없다.
         행이 여러개면 알아서 리스트로 만들어주기때문에 그냥 객체로 작성 -->
    <select id="findAll" resultType="com.spring.mvc.chap05.entity.Board">
        SELECT * FROM tbl_board
        ORDER BY board_no DESC
        LIMIT #{pageStart}, #{amount}
    </select>

    <select id="findOne" resultType="board">
        SELECT * FROM tbl_board
        WHERE board_no = #{boardNo}
    </select>






</mapper>














